  import pandas as pd
  import numpy as np
  from sklearn.preprocessing import StandardScaler
  from sklearn.cluster import KMeans

  # Load the dataset
  file_path = '/content/data.csv'  # Replace with the path to your data file
  try:
      data_sample = pd.read_csv(file_path, encoding='utf-8')
  except UnicodeDecodeError:
      data_sample = pd.read_csv(file_path, encoding='ISO-8859-1')

  # Convert InvoiceDate to datetime and extract useful features
  data_sample['InvoiceDate'] = pd.to_datetime(data_sample['InvoiceDate'])
  current_date = data_sample['InvoiceDate'].max() + pd.to_timedelta(1, unit='d')

  # Calculate total price
  data_sample['TotalPrice'] = data_sample['Quantity'] * data_sample['UnitPrice']

  # Aggregate data by CustomerID
  customer_data = data_sample.groupby('CustomerID').agg({
      'InvoiceDate': lambda x: (current_date - x.max()).days,  # Recency
      'InvoiceNo': 'nunique',   # Frequency
      'TotalPrice': 'sum'       # Monetary value
  })

  # Rename the columns
  customer_data.rename(columns={
      'InvoiceDate': 'Recency',
      'InvoiceNo': 'Frequency',
      'TotalPrice': 'MonetaryValue'
  }, inplace=True)

  # Scale the data
  scaler = StandardScaler()
  scaled_customer_data = scaler.fit_transform(customer_data)

  # Apply K-Means Clustering
  # Determine the optimal number of clusters using the Elbow method
  wcss = []
  for i in range(1, 11):
      kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
      kmeans.fit(scaled_customer_data)
      wcss.append(kmeans.inertia_)

  # Find the elbow point
  k_values = range(1, 11)
  optimal_k = np.argmax(np.diff(wcss)) + 2  # Plus 2 because index starts at 0 and we are interested in the point after the largest difference

  # Apply K-Means with the optimal number of clusters
  kmeans = KMeans(n_clusters=optimal_k, init='k-means++', max_iter=300, n_init=10, random_state=0)
  clusters_kmeans = kmeans.fit_predict(scaled_customer_data)

  # Add the cluster labels to the customer data
  customer_data['KMeans_Cluster'] = clusters_kmeans

  # Display the first few rows of the clustered data
  print(customer_data.head())
  output_file_path = '/content/clustered_data_machine_learning.xlsx'
  customer_data.to_excel(output_file_path, index=False)

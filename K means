  import pandas as pd
  import numpy as np
  from sklearn.preprocessing import StandardScaler
  from sklearn.cluster import KMeans


  file_path = '/content/data.csv'  
  try:
      data_sample = pd.read_csv(file_path, encoding='utf-8')
  except UnicodeDecodeError:
      data_sample = pd.read_csv(file_path, encoding='ISO-8859-1')

  
  data_sample['InvoiceDate'] = pd.to_datetime(data_sample['InvoiceDate'])
  current_date = data_sample['InvoiceDate'].max() + pd.to_timedelta(1, unit='d')

 
  data_sample['TotalPrice'] = data_sample['Quantity'] * data_sample['UnitPrice']

  
  customer_data = data_sample.groupby('CustomerID').agg({
      'InvoiceDate': lambda x: (current_date - x.max()).days,  # Recency
      'InvoiceNo': 'nunique',   # Frequency
      'TotalPrice': 'sum'       # Monetary value
  })


  customer_data.rename(columns={
      'InvoiceDate': 'Recency',
      'InvoiceNo': 'Frequency',
      'TotalPrice': 'MonetaryValue'
  }, inplace=True)

 
  scaler = StandardScaler()
  scaled_customer_data = scaler.fit_transform(customer_data)

 
  wcss = []
  for i in range(1, 11):
      kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
      kmeans.fit(scaled_customer_data)
      wcss.append(kmeans.inertia_)

 
  k_values = range(1, 11)
  optimal_k = np.argmax(np.diff(wcss)) + 2  


  kmeans = KMeans(n_clusters=optimal_k, init='k-means++', max_iter=300, n_init=10, random_state=0)
  clusters_kmeans = kmeans.fit_predict(scaled_customer_data)

 
  customer_data['KMeans_Cluster'] = clusters_kmeans

  print(customer_data.head())
  output_file_path = '/content/clustered_data_machine_learning.xlsx'
  customer_data.to_excel(output_file_path, index=False)
